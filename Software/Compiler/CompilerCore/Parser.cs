// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  LAPTOP-KDKHEG7R
// DateTime: 2021/4/26 12:46:17
// UserName: zyd20
// Input file <RT.y - 2021/4/26 12:46:19>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace CompilerCore
{
internal enum Tokens {error=128,EOF=129,AND=130,OR=131,EQ=132,
    NE=133,GT=134,GE=135,LT=136,LE=137,UMINUS=138,
    INT_LITERAL=139,FLOAT_LITERAL=140,VECTOR_LITERAL=141,IDENTIFIER=142,INT=143,FLOAT=144,
    VECTOR=145,VOID=146,IF=147,ELSE=148,FOR=149,WHILE=150,
    BREAK=151,CONTINUE=152,RETURN=153,STRUCT=154,CONST=155,INCREMENT=156,
    DECREMENT=157,TRACE=158,REDUCE=159};

internal struct ValueType
#line 11 "RT.y"
{ 
    internal Expression Expression;
    internal Statement Statement;
    internal ExpressionList ExpressionList;
    internal StatementList StatementList;
    internal string Identifier;
    internal DeclarationItem DeclaraionItem;
    internal DeclarationList DeclarationList;
    internal int IntLiteral;
    internal float FloatLiteral;
    internal string VectorLiteral;
    internal Type Type;
    internal ParameterList ParameterList;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from RT.y - 2021/4/26 12:46:19
#line 2 "RT.y"
    internal StatementList AST;
#line default
  // End verbatim content from RT.y - 2021/4/26 12:46:19

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[92];
  private static State[] states = new State[187];
  private static string[] nonTerms = new string[] {
      "program", "value_type", "statement", "loop_statement", "return_statement", 
      "assignment_statement", "function_definition_statement", "declaration_statement", 
      "for_special_statement", "block_statement", "toplevel_statement", "if_statement", 
      "declaration_item", "declaration_list", "statement_list", "optional_statement_list", 
      "expression_list", "expression", "binary_expression", "unary_expression", 
      "literal_expression", "index_expression", "possible_array_expression", 
      "optional_expression", "assignment_lval_expression", "identifier_expression", 
      "function_call_expression", "parameter_list", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{143,82,144,83,145,84,146,85,155,158},new int[]{-1,1,-11,186,-8,4,-2,6,-7,185});
    states[1] = new State(new int[]{129,2,143,82,144,83,145,84,146,85,155,158},new int[]{-11,3,-8,4,-2,6,-7,185});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(new int[]{59,5});
    states[5] = new State(-4);
    states[6] = new State(new int[]{142,96,42,94},new int[]{-14,7,-13,157});
    states[7] = new State(new int[]{44,8,59,-50,41,-50});
    states[8] = new State(new int[]{142,10,42,94},new int[]{-13,9});
    states[9] = new State(-53);
    states[10] = new State(new int[]{61,11,91,91,44,-54,59,-54,41,-54});
    states[11] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,12,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[12] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39,44,-55,59,-55,41,-55});
    states[13] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,14,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[14] = new State(new int[]{43,-63,45,-63,42,17,47,19,37,21,132,-63,133,-63,134,-63,135,-63,136,-63,137,-63,130,-63,131,-63,94,-63,44,-63,59,-63,41,-63,93,-63});
    states[15] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,16,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[16] = new State(new int[]{43,-64,45,-64,42,17,47,19,37,21,132,-64,133,-64,134,-64,135,-64,136,-64,137,-64,130,-64,131,-64,94,-64,44,-64,59,-64,41,-64,93,-64});
    states[17] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,18,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[18] = new State(-65);
    states[19] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,20,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[20] = new State(-66);
    states[21] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,22,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[22] = new State(-67);
    states[23] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,24,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[24] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,132,-68,133,-68,134,-68,135,-68,136,-68,137,-68,130,-68,131,-68,94,-68,44,-68,59,-68,41,-68,93,-68});
    states[25] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,26,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[26] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,132,-69,133,-69,134,-69,135,-69,136,-69,137,-69,130,-69,131,-69,94,-69,44,-69,59,-69,41,-69,93,-69});
    states[27] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,28,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[28] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,132,-70,133,-70,134,-70,135,-70,136,-70,137,-70,130,-70,131,-70,94,-70,44,-70,59,-70,41,-70,93,-70});
    states[29] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,30,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[30] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,132,-71,133,-71,134,-71,135,-71,136,-71,137,-71,130,-71,131,-71,94,-71,44,-71,59,-71,41,-71,93,-71});
    states[31] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,32,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[32] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,132,-72,133,-72,134,-72,135,-72,136,-72,137,-72,130,-72,131,-72,94,-72,44,-72,59,-72,41,-72,93,-72});
    states[33] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,34,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[34] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,132,-73,133,-73,134,-73,135,-73,136,-73,137,-73,130,-73,131,-73,94,-73,44,-73,59,-73,41,-73,93,-73});
    states[35] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,36,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[36] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,-74,131,-74,94,-74,44,-74,59,-74,41,-74,93,-74});
    states[37] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,38,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[38] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,-75,131,-75,94,-75,44,-75,59,-75,41,-75,93,-75});
    states[39] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,40,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[40] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,-76,131,-76,94,-76,44,-76,59,-76,41,-76,93,-76});
    states[41] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,42,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[42] = new State(new int[]{41,43,43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39});
    states[43] = new State(-42);
    states[44] = new State(-43);
    states[45] = new State(-44);
    states[46] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,47,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[47] = new State(-77);
    states[48] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,49,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[49] = new State(-78);
    states[50] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,51,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[51] = new State(-79);
    states[52] = new State(new int[]{91,53,43,-45,45,-45,42,-45,47,-45,37,-45,132,-45,133,-45,134,-45,135,-45,136,-45,137,-45,130,-45,131,-45,94,-45,44,-45,59,-45,41,-45,93,-45});
    states[53] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,54,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[54] = new State(new int[]{93,55,43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39});
    states[55] = new State(-84);
    states[56] = new State(-81);
    states[57] = new State(-82);
    states[58] = new State(new int[]{40,59,91,-80,43,-80,45,-80,42,-80,47,-80,37,-80,132,-80,133,-80,134,-80,135,-80,136,-80,137,-80,130,-80,131,-80,94,-80,44,-80,59,-80,41,-80,93,-80,61,-80,156,-80,157,-80});
    states[59] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86,41,-89,44,-89},new int[]{-17,60,-18,90,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[60] = new State(new int[]{41,61,44,62});
    states[61] = new State(-88);
    states[62] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,63,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[63] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39,41,-91,44,-91});
    states[64] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,65,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[65] = new State(new int[]{44,66,43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39});
    states[66] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,67,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[67] = new State(new int[]{44,68,43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39});
    states[68] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,69,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[69] = new State(new int[]{44,70,43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39});
    states[70] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,71,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[71] = new State(new int[]{93,72,43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39});
    states[72] = new State(-83);
    states[73] = new State(-46);
    states[74] = new State(-47);
    states[75] = new State(-85);
    states[76] = new State(-86);
    states[77] = new State(-87);
    states[78] = new State(new int[]{40,79});
    states[79] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,80,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[80] = new State(new int[]{41,81,43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39});
    states[81] = new State(-48);
    states[82] = new State(-38);
    states[83] = new State(-39);
    states[84] = new State(-40);
    states[85] = new State(-41);
    states[86] = new State(new int[]{40,87});
    states[87] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,88,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[88] = new State(new int[]{41,89,43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39});
    states[89] = new State(-49);
    states[90] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39,41,-90,44,-90});
    states[91] = new State(new int[]{139,92});
    states[92] = new State(new int[]{93,93});
    states[93] = new State(-57);
    states[94] = new State(new int[]{142,95});
    states[95] = new State(-56);
    states[96] = new State(new int[]{40,97,61,11,91,91,44,-54,59,-54});
    states[97] = new State(new int[]{143,82,144,83,145,84,146,85,41,-33,44,-33},new int[]{-28,98,-2,181});
    states[98] = new State(new int[]{41,99,44,176});
    states[99] = new State(new int[]{123,100});
    states[100] = new State(new int[]{147,108,149,114,150,123,153,129,142,58,91,64,143,82,144,83,145,84,146,85,155,158,152,161,151,163,123,166,125,-31},new int[]{-16,101,-15,103,-3,169,-12,105,-4,113,-5,128,-6,133,-25,135,-22,140,-23,141,-26,142,-8,154,-2,156,-10,165,-27,170});
    states[101] = new State(new int[]{125,102});
    states[102] = new State(-30);
    states[103] = new State(new int[]{147,108,149,114,150,123,153,129,142,58,91,64,143,82,144,83,145,84,146,85,155,158,152,161,151,163,123,166,125,-32},new int[]{-3,104,-12,105,-4,113,-5,128,-6,133,-25,135,-22,140,-23,141,-26,142,-8,154,-2,156,-10,165,-27,170});
    states[104] = new State(-7);
    states[105] = new State(new int[]{148,106,147,-8,149,-8,150,-8,153,-8,142,-8,91,-8,143,-8,144,-8,145,-8,146,-8,155,-8,152,-8,151,-8,123,-8,125,-8});
    states[106] = new State(new int[]{147,108,149,114,150,123,153,129,142,58,91,64,143,82,144,83,145,84,146,85,155,158,152,161,151,163,123,166},new int[]{-3,107,-12,105,-4,113,-5,128,-6,133,-25,135,-22,140,-23,141,-26,142,-8,154,-2,156,-10,165,-27,170});
    states[107] = new State(-29);
    states[108] = new State(new int[]{40,109});
    states[109] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,110,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[110] = new State(new int[]{41,111,43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39});
    states[111] = new State(new int[]{147,108,149,114,150,123,153,129,142,58,91,64,143,82,144,83,145,84,146,85,155,158,152,161,151,163,123,166},new int[]{-3,112,-12,105,-4,113,-5,128,-6,133,-25,135,-22,140,-23,141,-26,142,-8,154,-2,156,-10,165,-27,170});
    states[112] = new State(-28);
    states[113] = new State(-9);
    states[114] = new State(new int[]{40,115});
    states[115] = new State(new int[]{143,82,144,83,145,84,146,85,155,158,142,153,91,64,59,-25},new int[]{-9,116,-8,172,-2,156,-6,173,-25,135,-22,140,-23,141,-26,174});
    states[116] = new State(new int[]{59,117});
    states[117] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86,59,-23},new int[]{-24,118,-18,175,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[118] = new State(new int[]{59,119});
    states[119] = new State(new int[]{143,82,144,83,145,84,146,85,155,158,142,153,91,64,41,-25},new int[]{-9,120,-8,172,-2,156,-6,173,-25,135,-22,140,-23,141,-26,174});
    states[120] = new State(new int[]{41,121});
    states[121] = new State(new int[]{147,108,149,114,150,123,153,129,142,58,91,64,143,82,144,83,145,84,146,85,155,158,152,161,151,163,123,166},new int[]{-3,122,-12,105,-4,113,-5,128,-6,133,-25,135,-22,140,-23,141,-26,142,-8,154,-2,156,-10,165,-27,170});
    states[122] = new State(-21);
    states[123] = new State(new int[]{40,124});
    states[124] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,125,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[125] = new State(new int[]{41,126,43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39});
    states[126] = new State(new int[]{147,108,149,114,150,123,153,129,142,58,91,64,143,82,144,83,145,84,146,85,155,158,152,161,151,163,123,166},new int[]{-3,127,-12,105,-4,113,-5,128,-6,133,-25,135,-22,140,-23,141,-26,142,-8,154,-2,156,-10,165,-27,170});
    states[127] = new State(-22);
    states[128] = new State(-10);
    states[129] = new State(new int[]{59,130,40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,131,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[130] = new State(-18);
    states[131] = new State(new int[]{59,132,43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39});
    states[132] = new State(-19);
    states[133] = new State(new int[]{59,134});
    states[134] = new State(-11);
    states[135] = new State(new int[]{61,136,156,138,157,139});
    states[136] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,137,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[137] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39,59,-58,41,-58});
    states[138] = new State(-59);
    states[139] = new State(-60);
    states[140] = new State(new int[]{61,-61,156,-61,157,-61,91,-81});
    states[141] = new State(new int[]{91,53});
    states[142] = new State(new int[]{44,143,91,-82,61,-62,156,-62,157,-62});
    states[143] = new State(new int[]{142,153},new int[]{-26,144});
    states[144] = new State(new int[]{61,145});
    states[145] = new State(new int[]{158,146});
    states[146] = new State(new int[]{40,147});
    states[147] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,148,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[148] = new State(new int[]{44,149,43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39});
    states[149] = new State(new int[]{40,41,45,46,33,48,126,50,142,58,91,64,139,75,140,76,141,77,143,82,144,83,145,84,146,85,159,86},new int[]{-18,150,-19,44,-20,45,-23,52,-22,56,-26,57,-27,73,-21,74,-2,78});
    states[150] = new State(new int[]{41,151,43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39});
    states[151] = new State(new int[]{59,152});
    states[152] = new State(-17);
    states[153] = new State(-80);
    states[154] = new State(new int[]{59,155});
    states[155] = new State(-12);
    states[156] = new State(new int[]{142,10,42,94},new int[]{-14,7,-13,157});
    states[157] = new State(-52);
    states[158] = new State(new int[]{143,82,144,83,145,84,146,85},new int[]{-2,159});
    states[159] = new State(new int[]{142,10,42,94},new int[]{-14,160,-13,157});
    states[160] = new State(new int[]{44,8,59,-51,41,-51});
    states[161] = new State(new int[]{59,162});
    states[162] = new State(-13);
    states[163] = new State(new int[]{59,164});
    states[164] = new State(-14);
    states[165] = new State(-15);
    states[166] = new State(new int[]{147,108,149,114,150,123,153,129,142,58,91,64,143,82,144,83,145,84,146,85,155,158,152,161,151,163,123,166,125,-31},new int[]{-16,167,-15,103,-3,169,-12,105,-4,113,-5,128,-6,133,-25,135,-22,140,-23,141,-26,142,-8,154,-2,156,-10,165,-27,170});
    states[167] = new State(new int[]{125,168});
    states[168] = new State(-20);
    states[169] = new State(-6);
    states[170] = new State(new int[]{59,171});
    states[171] = new State(-16);
    states[172] = new State(-26);
    states[173] = new State(-27);
    states[174] = new State(new int[]{91,-82,61,-62,156,-62,157,-62});
    states[175] = new State(new int[]{43,13,45,15,42,17,47,19,37,21,132,23,133,25,134,27,135,29,136,31,137,33,130,35,131,37,94,39,59,-24});
    states[176] = new State(new int[]{143,82,144,83,145,84,146,85},new int[]{-2,177});
    states[177] = new State(new int[]{142,178,42,179});
    states[178] = new State(-35);
    states[179] = new State(new int[]{142,180});
    states[180] = new State(-37);
    states[181] = new State(new int[]{142,182,42,183});
    states[182] = new State(-34);
    states[183] = new State(new int[]{142,184});
    states[184] = new State(-36);
    states[185] = new State(-5);
    states[186] = new State(-2);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-29, new int[]{-1,129});
    rules[2] = new Rule(-1, new int[]{-11});
    rules[3] = new Rule(-1, new int[]{-1,-11});
    rules[4] = new Rule(-11, new int[]{-8,59});
    rules[5] = new Rule(-11, new int[]{-7});
    rules[6] = new Rule(-15, new int[]{-3});
    rules[7] = new Rule(-15, new int[]{-15,-3});
    rules[8] = new Rule(-3, new int[]{-12});
    rules[9] = new Rule(-3, new int[]{-4});
    rules[10] = new Rule(-3, new int[]{-5});
    rules[11] = new Rule(-3, new int[]{-6,59});
    rules[12] = new Rule(-3, new int[]{-8,59});
    rules[13] = new Rule(-3, new int[]{152,59});
    rules[14] = new Rule(-3, new int[]{151,59});
    rules[15] = new Rule(-3, new int[]{-10});
    rules[16] = new Rule(-3, new int[]{-27,59});
    rules[17] = new Rule(-3, new int[]{-26,44,-26,61,158,40,-18,44,-18,41,59});
    rules[18] = new Rule(-5, new int[]{153,59});
    rules[19] = new Rule(-5, new int[]{153,-18,59});
    rules[20] = new Rule(-10, new int[]{123,-16,125});
    rules[21] = new Rule(-4, new int[]{149,40,-9,59,-24,59,-9,41,-3});
    rules[22] = new Rule(-4, new int[]{150,40,-18,41,-3});
    rules[23] = new Rule(-24, new int[]{});
    rules[24] = new Rule(-24, new int[]{-18});
    rules[25] = new Rule(-9, new int[]{});
    rules[26] = new Rule(-9, new int[]{-8});
    rules[27] = new Rule(-9, new int[]{-6});
    rules[28] = new Rule(-12, new int[]{147,40,-18,41,-3});
    rules[29] = new Rule(-12, new int[]{-12,148,-3});
    rules[30] = new Rule(-7, new int[]{-2,142,40,-28,41,123,-16,125});
    rules[31] = new Rule(-16, new int[]{});
    rules[32] = new Rule(-16, new int[]{-15});
    rules[33] = new Rule(-28, new int[]{});
    rules[34] = new Rule(-28, new int[]{-2,142});
    rules[35] = new Rule(-28, new int[]{-28,44,-2,142});
    rules[36] = new Rule(-28, new int[]{-2,42,142});
    rules[37] = new Rule(-28, new int[]{-28,44,-2,42,142});
    rules[38] = new Rule(-2, new int[]{143});
    rules[39] = new Rule(-2, new int[]{144});
    rules[40] = new Rule(-2, new int[]{145});
    rules[41] = new Rule(-2, new int[]{146});
    rules[42] = new Rule(-18, new int[]{40,-18,41});
    rules[43] = new Rule(-18, new int[]{-19});
    rules[44] = new Rule(-18, new int[]{-20});
    rules[45] = new Rule(-18, new int[]{-23});
    rules[46] = new Rule(-18, new int[]{-27});
    rules[47] = new Rule(-18, new int[]{-21});
    rules[48] = new Rule(-18, new int[]{-2,40,-18,41});
    rules[49] = new Rule(-18, new int[]{159,40,-18,41});
    rules[50] = new Rule(-8, new int[]{-2,-14});
    rules[51] = new Rule(-8, new int[]{155,-2,-14});
    rules[52] = new Rule(-14, new int[]{-13});
    rules[53] = new Rule(-14, new int[]{-14,44,-13});
    rules[54] = new Rule(-13, new int[]{142});
    rules[55] = new Rule(-13, new int[]{142,61,-18});
    rules[56] = new Rule(-13, new int[]{42,142});
    rules[57] = new Rule(-13, new int[]{142,91,139,93});
    rules[58] = new Rule(-6, new int[]{-25,61,-18});
    rules[59] = new Rule(-6, new int[]{-25,156});
    rules[60] = new Rule(-6, new int[]{-25,157});
    rules[61] = new Rule(-25, new int[]{-22});
    rules[62] = new Rule(-25, new int[]{-26});
    rules[63] = new Rule(-19, new int[]{-18,43,-18});
    rules[64] = new Rule(-19, new int[]{-18,45,-18});
    rules[65] = new Rule(-19, new int[]{-18,42,-18});
    rules[66] = new Rule(-19, new int[]{-18,47,-18});
    rules[67] = new Rule(-19, new int[]{-18,37,-18});
    rules[68] = new Rule(-19, new int[]{-18,132,-18});
    rules[69] = new Rule(-19, new int[]{-18,133,-18});
    rules[70] = new Rule(-19, new int[]{-18,134,-18});
    rules[71] = new Rule(-19, new int[]{-18,135,-18});
    rules[72] = new Rule(-19, new int[]{-18,136,-18});
    rules[73] = new Rule(-19, new int[]{-18,137,-18});
    rules[74] = new Rule(-19, new int[]{-18,130,-18});
    rules[75] = new Rule(-19, new int[]{-18,131,-18});
    rules[76] = new Rule(-19, new int[]{-18,94,-18});
    rules[77] = new Rule(-20, new int[]{45,-18});
    rules[78] = new Rule(-20, new int[]{33,-18});
    rules[79] = new Rule(-20, new int[]{126,-18});
    rules[80] = new Rule(-26, new int[]{142});
    rules[81] = new Rule(-23, new int[]{-22});
    rules[82] = new Rule(-23, new int[]{-26});
    rules[83] = new Rule(-23, new int[]{91,-18,44,-18,44,-18,44,-18,93});
    rules[84] = new Rule(-22, new int[]{-23,91,-18,93});
    rules[85] = new Rule(-21, new int[]{139});
    rules[86] = new Rule(-21, new int[]{140});
    rules[87] = new Rule(-21, new int[]{141});
    rules[88] = new Rule(-27, new int[]{142,40,-17,41});
    rules[89] = new Rule(-17, new int[]{});
    rules[90] = new Rule(-17, new int[]{-18});
    rules[91] = new Rule(-17, new int[]{-17,44,-18});

    aliases = new Dictionary<int, string>();
    aliases.Add(130, "&&");
    aliases.Add(131, "||");
    aliases.Add(132, "==");
    aliases.Add(133, "!=");
    aliases.Add(134, ">");
    aliases.Add(135, ">=");
    aliases.Add(136, "<");
    aliases.Add(137, "<=");
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> toplevel_statement
#line 51 "RT.y"
    {
        AST = new StatementList(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].Statement);
    }
#line default
        break;
      case 3: // program -> program, toplevel_statement
#line 55 "RT.y"
    {
        AST.Add(ValueStack[ValueStack.Depth-1].Statement);
    }
#line default
        break;
      case 6: // statement_list -> statement
#line 64 "RT.y"
    {
        CurrentSemanticValue.StatementList = new StatementList(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].Statement);
    }
#line default
        break;
      case 7: // statement_list -> statement_list, statement
#line 68 "RT.y"
    {
        CurrentSemanticValue.StatementList = ValueStack[ValueStack.Depth-2].StatementList.Add(ValueStack[ValueStack.Depth-1].Statement);
    }
#line default
        break;
      case 13: // statement -> CONTINUE, ';'
#line 79 "RT.y"
    {
        CurrentSemanticValue.Statement = new ControlStatement(CurrentLocationSpan, ControlStatement.Type.CONTINUE);
    }
#line default
        break;
      case 14: // statement -> BREAK, ';'
#line 83 "RT.y"
    {
        CurrentSemanticValue.Statement = new ControlStatement(CurrentLocationSpan, ControlStatement.Type.BREAK);
    }
#line default
        break;
      case 16: // statement -> function_call_expression, ';'
#line 88 "RT.y"
    {
        CurrentSemanticValue.Statement = new FunctionCallStatement(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].Expression as FunctionCallExpression);
    }
#line default
        break;
      case 17: // statement -> identifier_expression, ',', identifier_expression, '=', TRACE, '(', 
               //              expression, ',', expression, ')', ';'
#line 92 "RT.y"
    {
        CurrentSemanticValue.Statement = new TraceStatement(CurrentLocationSpan, ValueStack[ValueStack.Depth-11].Expression, ValueStack[ValueStack.Depth-9].Expression, ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-3].Expression);
    }
#line default
        break;
      case 18: // return_statement -> RETURN, ';'
#line 97 "RT.y"
    {
        CurrentSemanticValue.Statement = new ReturnStatement(CurrentLocationSpan);
    }
#line default
        break;
      case 19: // return_statement -> RETURN, expression, ';'
#line 101 "RT.y"
    {
        CurrentSemanticValue.Statement = new ReturnStatement(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].Expression);
    }
#line default
        break;
      case 20: // block_statement -> '{', optional_statement_list, '}'
#line 106 "RT.y"
    {
        CurrentSemanticValue.Statement = new BlockStatement(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].StatementList);
    }
#line default
        break;
      case 21: // loop_statement -> FOR, '(', for_special_statement, ';', optional_expression, 
               //                   ';', for_special_statement, ')', statement
#line 111 "RT.y"
    {
        CurrentSemanticValue.Statement = new LoopStatement(CurrentLocationSpan, ValueStack[ValueStack.Depth-7].Statement, ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-3].Statement, ValueStack[ValueStack.Depth-1].Statement);
    }
#line default
        break;
      case 22: // loop_statement -> WHILE, '(', expression, ')', statement
#line 115 "RT.y"
    {
        CurrentSemanticValue.Statement = new LoopStatement(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement);
    }
#line default
        break;
      case 23: // optional_expression -> /* empty */
#line 120 "RT.y"
    {
        CurrentSemanticValue.Expression = null;
    }
#line default
        break;
      case 25: // for_special_statement -> /* empty */
#line 126 "RT.y"
    {
        CurrentSemanticValue.Statement = null;
    }
#line default
        break;
      case 28: // if_statement -> IF, '(', expression, ')', statement
#line 133 "RT.y"
    {
        CurrentSemanticValue.Statement = new IfStatement(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement);
    }
#line default
        break;
      case 29: // if_statement -> if_statement, ELSE, statement
#line 137 "RT.y"
    {
        CurrentSemanticValue.Statement = (ValueStack[ValueStack.Depth-3].Statement as IfStatement).AddElse(ValueStack[ValueStack.Depth-1].Statement);
    }
#line default
        break;
      case 30: // function_definition_statement -> value_type, IDENTIFIER, '(', parameter_list, 
               //                                  ')', '{', optional_statement_list, '}'
#line 142 "RT.y"
    {
        CurrentSemanticValue.Statement = new FunctionDefinitionStatement(CurrentLocationSpan, ValueStack[ValueStack.Depth-8].Type, ValueStack[ValueStack.Depth-7].Identifier, ValueStack[ValueStack.Depth-5].ParameterList, ValueStack[ValueStack.Depth-2].StatementList);
    }
#line default
        break;
      case 31: // optional_statement_list -> /* empty */
#line 147 "RT.y"
    {
        CurrentSemanticValue.StatementList = new StatementList(CurrentLocationSpan);
    }
#line default
        break;
      case 33: // parameter_list -> /* empty */
#line 153 "RT.y"
    {
        CurrentSemanticValue.ParameterList = new ParameterList(CurrentLocationSpan);
    }
#line default
        break;
      case 34: // parameter_list -> value_type, IDENTIFIER
#line 157 "RT.y"
    {
        CurrentSemanticValue.ParameterList = new ParameterList(CurrentLocationSpan, new Parameter(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].Type, ValueStack[ValueStack.Depth-1].Identifier));
    }
#line default
        break;
      case 35: // parameter_list -> parameter_list, ',', value_type, IDENTIFIER
#line 161 "RT.y"
    {
        CurrentSemanticValue.ParameterList = ValueStack[ValueStack.Depth-4].ParameterList.Add(new Parameter(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].Type, ValueStack[ValueStack.Depth-1].Identifier));
    }
#line default
        break;
      case 36: // parameter_list -> value_type, '*', IDENTIFIER
#line 165 "RT.y"
    {
        CurrentSemanticValue.ParameterList = new ParameterList(CurrentLocationSpan, new Parameter(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].Type, ValueStack[ValueStack.Depth-1].Identifier, true));
    }
#line default
        break;
      case 37: // parameter_list -> parameter_list, ',', value_type, '*', IDENTIFIER
#line 169 "RT.y"
    {
        CurrentSemanticValue.ParameterList = ValueStack[ValueStack.Depth-5].ParameterList.Add(new Parameter(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].Type, ValueStack[ValueStack.Depth-1].Identifier, true));
    }
#line default
        break;
      case 38: // value_type -> INT
#line 173 "RT.y"
                {CurrentSemanticValue.Type = Type.INT;}
#line default
        break;
      case 39: // value_type -> FLOAT
#line 174 "RT.y"
            {CurrentSemanticValue.Type = Type.FLOAT;}
#line default
        break;
      case 40: // value_type -> VECTOR
#line 175 "RT.y"
             {CurrentSemanticValue.Type = Type.VECTOR;}
#line default
        break;
      case 41: // value_type -> VOID
#line 176 "RT.y"
           {CurrentSemanticValue.Type = Type.VOID;}
#line default
        break;
      case 42: // expression -> '(', expression, ')'
#line 180 "RT.y"
    {
        CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-2].Expression;
    }
#line default
        break;
      case 48: // expression -> value_type, '(', expression, ')'
#line 189 "RT.y"
    {
        CurrentSemanticValue.Expression = new TypeCastExpression(CurrentLocationSpan, ValueStack[ValueStack.Depth-4].Type, ValueStack[ValueStack.Depth-2].Expression);
    }
#line default
        break;
      case 49: // expression -> REDUCE, '(', expression, ')'
#line 193 "RT.y"
    {
        CurrentSemanticValue.Expression = new ReduceExpression(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].Expression);
    }
#line default
        break;
      case 50: // declaration_statement -> value_type, declaration_list
#line 198 "RT.y"
    {
        CurrentSemanticValue.Statement = new DeclarationStatement(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].Type, ValueStack[ValueStack.Depth-1].DeclarationList);
    }
#line default
        break;
      case 51: // declaration_statement -> CONST, value_type, declaration_list
#line 202 "RT.y"
    {
        CurrentSemanticValue.Statement = new DeclarationStatement(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].Type, ValueStack[ValueStack.Depth-1].DeclarationList, true);
    }
#line default
        break;
      case 52: // declaration_list -> declaration_item
#line 207 "RT.y"
    {
        CurrentSemanticValue.DeclarationList = new DeclarationList(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].DeclaraionItem);
    }
#line default
        break;
      case 53: // declaration_list -> declaration_list, ',', declaration_item
#line 211 "RT.y"
    {
        CurrentSemanticValue.DeclarationList = ValueStack[ValueStack.Depth-3].DeclarationList.Add(ValueStack[ValueStack.Depth-1].DeclaraionItem);
    }
#line default
        break;
      case 54: // declaration_item -> IDENTIFIER
#line 216 "RT.y"
    {
        CurrentSemanticValue.DeclaraionItem = new DeclarationItem(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].Identifier);
    }
#line default
        break;
      case 55: // declaration_item -> IDENTIFIER, '=', expression
#line 220 "RT.y"
    {
        CurrentSemanticValue.DeclaraionItem = new DeclarationItem(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].Identifier, ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
      case 56: // declaration_item -> '*', IDENTIFIER
#line 224 "RT.y"
    {
        CurrentSemanticValue.DeclaraionItem = new DeclarationItem(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].Identifier, true);
    }
#line default
        break;
      case 57: // declaration_item -> IDENTIFIER, '[', INT_LITERAL, ']'
#line 228 "RT.y"
    {
        CurrentSemanticValue.DeclaraionItem = new DeclarationItem(CurrentLocationSpan, ValueStack[ValueStack.Depth-4].Identifier, null, ValueStack[ValueStack.Depth-2].IntLiteral);
    }
#line default
        break;
      case 58: // assignment_statement -> assignment_lval_expression, '=', expression
#line 233 "RT.y"
    {
        CurrentSemanticValue.Statement = new AssignmentStatement(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
      case 59: // assignment_statement -> assignment_lval_expression, INCREMENT
#line 237 "RT.y"
    {
        var one = new IntLiteralExpression(CurrentLocationSpan, 1);
        CurrentSemanticValue.Statement = new AssignmentStatement(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].Expression, new BinaryExpression(CurrentLocationSpan, BinaryExpression.Type.ADD, ValueStack[ValueStack.Depth-2].Expression, one));
    }
#line default
        break;
      case 60: // assignment_statement -> assignment_lval_expression, DECREMENT
#line 242 "RT.y"
    {
        var one = new IntLiteralExpression(CurrentLocationSpan, 1);
        CurrentSemanticValue.Statement = new AssignmentStatement(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].Expression, new BinaryExpression(CurrentLocationSpan, BinaryExpression.Type.SUB, ValueStack[ValueStack.Depth-2].Expression, one));
    }
#line default
        break;
      case 63: // binary_expression -> expression, '+', expression
#line 251 "RT.y"
    {
        CurrentSemanticValue.Expression = new BinaryExpression(CurrentLocationSpan, BinaryExpression.Type.ADD, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
      case 64: // binary_expression -> expression, '-', expression
#line 255 "RT.y"
    {
        CurrentSemanticValue.Expression = new BinaryExpression(CurrentLocationSpan, BinaryExpression.Type.SUB, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);            
    }
#line default
        break;
      case 65: // binary_expression -> expression, '*', expression
#line 259 "RT.y"
    {
        CurrentSemanticValue.Expression = new BinaryExpression(CurrentLocationSpan, BinaryExpression.Type.MUL, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);            
    }
#line default
        break;
      case 66: // binary_expression -> expression, '/', expression
#line 263 "RT.y"
    {
        CurrentSemanticValue.Expression = new BinaryExpression(CurrentLocationSpan, BinaryExpression.Type.DIV, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);            
    }
#line default
        break;
      case 67: // binary_expression -> expression, '%', expression
#line 267 "RT.y"
    {
        CurrentSemanticValue.Expression = new BinaryExpression(CurrentLocationSpan, BinaryExpression.Type.MOD, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);            
    }
#line default
        break;
      case 68: // binary_expression -> expression, "==", expression
#line 271 "RT.y"
    {
        CurrentSemanticValue.Expression = new BinaryExpression(CurrentLocationSpan, BinaryExpression.Type.EQ, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
      case 69: // binary_expression -> expression, "!=", expression
#line 275 "RT.y"
    {
        CurrentSemanticValue.Expression = new BinaryExpression(CurrentLocationSpan, BinaryExpression.Type.NE, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
      case 70: // binary_expression -> expression, ">", expression
#line 279 "RT.y"
    {
        CurrentSemanticValue.Expression = new BinaryExpression(CurrentLocationSpan, BinaryExpression.Type.GT, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
      case 71: // binary_expression -> expression, ">=", expression
#line 283 "RT.y"
    {
        CurrentSemanticValue.Expression = new BinaryExpression(CurrentLocationSpan, BinaryExpression.Type.GE, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
      case 72: // binary_expression -> expression, "<", expression
#line 287 "RT.y"
    {
        CurrentSemanticValue.Expression = new BinaryExpression(CurrentLocationSpan, BinaryExpression.Type.LT, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
      case 73: // binary_expression -> expression, "<=", expression
#line 291 "RT.y"
    {
        CurrentSemanticValue.Expression = new BinaryExpression(CurrentLocationSpan, BinaryExpression.Type.LE, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
      case 74: // binary_expression -> expression, "&&", expression
#line 295 "RT.y"
    {
        CurrentSemanticValue.Expression = new BinaryExpression(CurrentLocationSpan, BinaryExpression.Type.AND, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
      case 75: // binary_expression -> expression, "||", expression
#line 299 "RT.y"
    {
        CurrentSemanticValue.Expression = new BinaryExpression(CurrentLocationSpan, BinaryExpression.Type.OR, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
      case 76: // binary_expression -> expression, '^', expression
#line 303 "RT.y"
    {
        CurrentSemanticValue.Expression = new BinaryExpression(CurrentLocationSpan, BinaryExpression.Type.XOR, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
      case 77: // unary_expression -> '-', expression
#line 308 "RT.y"
    {
        CurrentSemanticValue.Expression = new UnaryExpression(CurrentLocationSpan, UnaryExpression.Type.NEGATE, ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
      case 78: // unary_expression -> '!', expression
#line 312 "RT.y"
    {
        CurrentSemanticValue.Expression = new UnaryExpression(CurrentLocationSpan, UnaryExpression.Type.NOT, ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
      case 79: // unary_expression -> '~', expression
#line 316 "RT.y"
    {
        CurrentSemanticValue.Expression = new UnaryExpression(CurrentLocationSpan, UnaryExpression.Type.BITWISE_NOT, ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
      case 80: // identifier_expression -> IDENTIFIER
#line 321 "RT.y"
    {
        CurrentSemanticValue.Expression = new IdentifierExpression(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].Identifier);
    }
#line default
        break;
      case 83: // possible_array_expression -> '[', expression, ',', expression, ',', expression, 
               //                              ',', expression, ']'
#line 328 "RT.y"
    {
        CurrentSemanticValue.Expression = new VectorConstructorExpression(CurrentLocationSpan, ValueStack[ValueStack.Depth-8].Expression, ValueStack[ValueStack.Depth-6].Expression, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression);
    }
#line default
        break;
      case 84: // index_expression -> possible_array_expression, '[', expression, ']'
#line 333 "RT.y"
    {
        CurrentSemanticValue.Expression = new IndexExpression(CurrentLocationSpan, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression);
    }
#line default
        break;
      case 85: // literal_expression -> INT_LITERAL
#line 338 "RT.y"
    {
        CurrentSemanticValue.Expression = new IntLiteralExpression(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].IntLiteral);
    }
#line default
        break;
      case 86: // literal_expression -> FLOAT_LITERAL
#line 342 "RT.y"
    {
        CurrentSemanticValue.Expression = new FloatLiteralExpression(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].FloatLiteral);
    }
#line default
        break;
      case 87: // literal_expression -> VECTOR_LITERAL
#line 346 "RT.y"
    {
        CurrentSemanticValue.Expression = new VectorLiteralExpression(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].VectorLiteral);
    }
#line default
        break;
      case 88: // function_call_expression -> IDENTIFIER, '(', expression_list, ')'
#line 351 "RT.y"
    {
        CurrentSemanticValue.Expression = new FunctionCallExpression(CurrentLocationSpan, ValueStack[ValueStack.Depth-4].Identifier, ValueStack[ValueStack.Depth-2].ExpressionList);
    }
#line default
        break;
      case 89: // expression_list -> /* empty */
#line 356 "RT.y"
    {
        CurrentSemanticValue.ExpressionList = new ExpressionList(CurrentLocationSpan);
    }
#line default
        break;
      case 90: // expression_list -> expression
#line 360 "RT.y"
    {
        CurrentSemanticValue.ExpressionList = new ExpressionList(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
      case 91: // expression_list -> expression_list, ',', expression
#line 364 "RT.y"
    {
        CurrentSemanticValue.ExpressionList = ValueStack[ValueStack.Depth-3].ExpressionList.Add(ValueStack[ValueStack.Depth-1].Expression);
    }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 369 "RT.y"
public Parser(Scanner scnr) : base(scnr) { }
#line default
}
}
